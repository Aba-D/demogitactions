name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  
  build:
    runs-on: ubuntu-latest
    
    strategy:
          fail-fast: false
          matrix:
            language: [ 'csharp' ]   # âœ… not 'dotnet'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore ./dotnet-ecs-sample/dotnet-ecs-sample.csproj

    - name: Build
      run: dotnet build ./dotnet-ecs-sample/dotnet-ecs-sample.csproj -c Release --no-restore

    # - name: Run tests
    #   run: dotnet test --no-build --verbosity normal

    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
              # For C#, you can skip building entirely:
        build-mode: none

    - name: Analyze
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{ matrix.language }}"

  docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        ECR_REPOSITORY: dotnet-ecs-sample
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#   deploy:
#     needs: docker
#     runs-on: ubuntu-latest
#     steps:
#     - name: Deploy to ECS
#       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#       with:
#         task-definition: ecs-task-def.json
#         service: dotnet-ecs-service
#         cluster: dotnet-ecs-cluster
#         wait-for-service-stability: true