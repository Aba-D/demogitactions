name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
        security-events: write
        actions: read
        contents: read
        packages: write   # ✅ needed to push to GHCR
    
    # strategy:
    #       fail-fast: false
    #       matrix:
    #         language: [ 'csharp' ]   # ✅ not 'dotnet'

    steps:
    
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore ./dotnet-ecs-sample/dotnet-ecs-sample.csproj

    - name: Build
      run: dotnet build ./dotnet-ecs-sample/dotnet-ecs-sample.csproj -c Release --no-restore

    - name: Test (auto-discover *Tests.csproj)
      run: |
        set -euo pipefail
        if git ls-files '*Tests.csproj' >/dev/null 2>&1; then
          while IFS= read -r t; do
              echo "Running tests: $t"
              dotnet test "$t" -c Release --no-build --logger trx
              done < <(git ls-files '*Tests.csproj')
        else
          echo "No test projects found; skipping."
        fi
# --- SARIF (CodeQL) support for code scanning ---
    # - name: Initialize CodeQL
    #   uses: github/codeql-action/init@v3
    #   with:
    #     languages: ${{ matrix.language }}
    #     build-mode: none

    # - name: Analyze
    #   uses: github/codeql-action/analyze@v3
    #   with:
    #     category: "/language:${{ matrix.language }}"

# --- Container build & push to GHCR ---
    # - name: Set up Docker Buildx
    #   uses: docker/setup-buildx-action@v3

    # - name: Log in to GitHub Container Registry
    #   uses: docker/login-action@v3
    #   with:
    #       registry: ghcr.io
    #       username: ${{ github.actor }}
    #       password: ${{ secrets.GITHUB_TOKEN }}  # ✅ no Docker password needed

    # - name: Build and push image
    #   uses: docker/build-push-action@v6
    #   with:
    #       context: .
    #       file: ./dotnet-ecs-sample/Dockerfile
    #       push: true
    #       tags: |
    #         ghcr.io/${{ github.repository_owner }}/dotnet-ecs-sample:latest
    #         ghcr.io/${{ github.repository_owner }}/dotnet-ecs-sample:${{ github.sha }}
    #       cache-from: type=gha
    #       cache-to: type=gha,mode=max
    
    - name: Log in to GitHub Container Registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Build Docker image
      run: |
        ls -la
        docker build -t ghcr.io/${{ github.repository_owner }}/dotnet-ecs-sample:latest --file ./dotnet-ecs-sample/Dockerfile .


  # docker:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v3

  #   - name: Login to Amazon ECR
  #     uses: aws-actions/amazon-ecr-login@v1

  #   - name: Build and push Docker image
  #     env:
  #       ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  #       ECR_REPOSITORY: dotnet-ecs-sample
  #       IMAGE_TAG: latest
  #     run: |
  #       docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #       docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#   deploy:
#     needs: docker
#     runs-on: ubuntu-latest
#     steps:
#     - name: Deploy to ECS
#       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#       with:
#         task-definition: ecs-task-def.json
#         service: dotnet-ecs-service
#         cluster: dotnet-ecs-cluster
#         wait-for-service-stability: true